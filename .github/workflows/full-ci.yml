# Copyright (c) godot-rust; Bromeon and contributors.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: Full CI
#
# Runs before merging. Rebases on master to make sure CI passes for latest integration, not only for the PR at the time of creation.

on:
  # Allow manually triggering the workflow:
  # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch:
  merge_group:
  push:


env:
  # Applies to all 'register-docs' features across crates.
  CLIPPY_FEATURES: '--features register-docs,godot/experimental-godot-api,godot/serde'
  TEST_FEATURES: ''
  RETRY: ${{ github.workspace }}/.github/other/retry.sh

  # ASan options: https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
  # LSan options: https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
  # * report_objects: list individual leaked objects when running LeakSanitizer
  LSAN_OPTIONS: report_objects=1

  CARGO_DENY_VERSION: "0.16.1"
  CARGO_MACHETE_VERSION: "0.7.0"


defaults:
  run:
    shell: bash

# If a new commit is pushed before the old one's CI has completed (on the same branch), abort previous run
#concurrency:
#  group: ${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  # For complex matrix workflow, see https://stackoverflow.com/a/65434401
  godot-itest:
    name: godot-itest (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 24
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Naming: {os}[-{runtimeVersion}]-{apiVersion}
        # runtimeVersion = version of Godot binary; apiVersion = version of GDExtension API against which gdext is compiled.

        # Config overview (see job for details).
        #
        # Cross-platform:
        # - Base version:     Godot nightly, no custom
        # - Double precision: Godot nightly, custom (bindgen), double
        # - 4.2 compat:       Godot 4.2
        #
        # Linux-only:
        # - Full:             Godot nightly, full codegen
        # - Double + lazy:    Godot nightly, custom, double, lazy func tables
        # - Features + exp:   Godot nightly, custom, threads, serde, experimental API
        # - Memcheck nightly: Godot mem nightly, custom, sanitizer
        # - Memcheck 4.x:     Godot mem 4.0/4.1, sanitizer

        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          # macOS -- for the unintuitive naming, see https://github.com/actions/runner-images?tab=readme-ov-file#available-images

          - name: macos-x86-01
            os: macos-13
            artifact-name: macos-x86-nightly
            godot-binary: godot.macos.editor.dev.x86_64
            rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: macos-x86-02
          #   os: macos-13
          #   artifact-name: macos-x86-nightly
          #   godot-binary: godot.macos.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          - name: macos-arm-01
            os: macos-latest
            artifact-name: macos-arm-nightly
            godot-binary: godot.macos.editor.dev.arm64
            rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: macos-arm-02
          #   os: macos-latest
          #   artifact-name: macos-arm-nightly
          #   godot-binary: godot.macos.editor.dev.arm64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs


          # Windows

          - name: windows-01
            os: windows-latest
            artifact-name: windows-nightly
            godot-binary: godot.windows.editor.dev.x86_64.exe
            rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: windows-02
          #   os: windows-latest
          #   artifact-name: windows-nightly
          #   godot-binary: godot.windows.editor.dev.x86_64.exe
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: windows-03
          #   os: windows-latest
          #   artifact-name: windows-nightly
          #   godot-binary: godot.windows.editor.dev.x86_64.exe
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # Linux

          - name: linux-01
            os: ubuntu-22.04
            artifact-name: linux-nightly
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-02
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-03
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-04
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-05
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-06
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-07
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-08
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          # - name: linux-09
          #   os: ubuntu-22.04
          #   artifact-name: linux-nightly
          #   godot-binary: godot.linuxbsd.editor.dev.x86_64
          #   rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs



          # Linux memcheck

#           - name: linux-memcheck-01
#             os: ubuntu-22.04
#             artifact-name: linux-memcheck-nightly
#             godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
#             rust-toolchain: nightly
#             rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
#             rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs
#             # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
#             rust-target: x86_64-unknown-linux-gnu
#
#           - name: linux-memcheck-02
#             os: ubuntu-22.04
#             artifact-name: linux-memcheck-nightly
#             godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
#             rust-toolchain: nightly
#             rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
#             rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs
#             # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
#             rust-target: x86_64-unknown-linux-gnu
#
#           - name: linux-memcheck-03
#             os: ubuntu-22.04
#             artifact-name: linux-memcheck-nightly
#             godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
#             rust-toolchain: nightly
#             rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
#             rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs
#             # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
#             rust-target: x86_64-unknown-linux-gnu


    steps:
      - uses: actions/checkout@v4

      - name: "Run Godot integration test"
        uses: ./.github/composite/godot-itest
        with:
          artifact-name: godot-${{ matrix.artifact-name }}
          godot-binary: ${{ matrix.godot-binary }}
          godot-args: ${{ matrix.godot-args }} # currently unused
          godot-prebuilt-patch: ${{ matrix.godot-prebuilt-patch }}
          rust-extra-args: ${{ matrix.rust-extra-args }}
          rust-toolchain: ${{ matrix.rust-toolchain || 'stable' }}
          rust-env-rustflags: ${{ matrix.rust-env-rustflags }}
          rust-target: ${{ matrix.rust-target }}
          rust-cache-key: ${{ matrix.rust-cache-key }}
          with-llvm: ${{ contains(matrix.name, 'macos') && contains(matrix.rust-extra-args, 'api-custom') }}
          godot-check-header: ${{ matrix.godot-check-header }}
          
      - name: "Build and test hot-reload"
        if: ${{ matrix.with-hot-reload }}
        working-directory: itest/hot-reload/godot
        # Repeat a few times, our hot reload integration test can sometimes be a bit flaky.
        run: $RETRY ./run-test.sh
        shell: bash



  # ---------------------------------------------------------------------------------------------------------------------------------------------
  # CI status report

  # Job to notify merge queue about success/failure
  ci-status:
    # Check for 'merge_group' not strictly necessary, but helpful when adding add-hoc `push:` trigger to `on:` for testing branch.
    if: always() && github.event_name == 'merge_group'
    needs:
      - godot-itest

    runs-on: ubuntu-22.04
    steps:
      # Deliberate choice to use bash script and not GitHub Action glob syntax, as that is not well-documented and hard to get right.
      # For example: contains(needs.*.result, 'success') does NOT work because * is a logical OR, thus true if a single job succeeds.
      - name: "Determine success or failure"
        run: |
          DEPENDENCIES='${{ toJson(needs) }}'
          
          echo "Dependency jobs:"
          all_success=true
          for job in $(echo "$DEPENDENCIES" | jq -r 'keys[]'); do
              status=$(echo "$DEPENDENCIES" | jq -r ".[\"$job\"].result")
              echo "* $job -> $status"
              if [[ "$status" != "success" ]]; then
                  all_success=false
              fi
          done
          
          if [[ "$all_success" == "false" ]]; then
              echo "One or more dependency jobs failed or were cancelled."
              exit 1
          fi
